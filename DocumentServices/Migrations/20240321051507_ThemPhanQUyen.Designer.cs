// <auto-generated />
using System;
using DocumentServices.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DocumentServices.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20240321051507_ThemPhanQUyen")]
    partial class ThemPhanQUyen
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DocumentServices.Models.Document", b =>
                {
                    b.Property<int>("documentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("documentID"), 1L, 1);

                    b.Property<int?>("FlightId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeDocumentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("creator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("filePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nameDocument")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("documentID");

                    b.HasIndex("TypeDocumentId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("DocumentServices.Models.PhanQuyenTaiLieu", b =>
                {
                    b.Property<int>("TypeDocumentID")
                        .HasColumnType("int");

                    b.Property<string>("NameRole")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Claims")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeDocumentID", "NameRole");

                    b.ToTable("phanQuyenTaiLieus");
                });

            modelBuilder.Entity("DocumentServices.Models.TypeDocument", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Creator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.ToTable("TypeDocuments");
                });

            modelBuilder.Entity("DocumentServices.Models.Document", b =>
                {
                    b.HasOne("DocumentServices.Models.TypeDocument", "typeDocumentType")
                        .WithMany()
                        .HasForeignKey("TypeDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("typeDocumentType");
                });
#pragma warning restore 612, 618
        }
    }
}
